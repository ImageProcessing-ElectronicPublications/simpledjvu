diff --git a/connected_components.cpp b/connected_components.cpp
index eac69fc..5e400eb 100644
--- a/connected_components.cpp
+++ b/connected_components.cpp
@@ -23,15 +23,44 @@ void ConnectedComponent::save(FILE *file) const {
     save_pbm(file, form);
 }
 
-ConnectedComponent::ConnectedComponent(): left(999999), right(-1), top(999999), bottom(-1) {
+int ConnectedComponent::left() const {
+    return position.left;
+}
+
+int ConnectedComponent::right() const {
+    return position.right;
+}
+
+int ConnectedComponent::top() const {
+    return position.top;
+}
+
+int ConnectedComponent::bottom() const {
+    return position.bottom;
+}
+
+int ConnectedComponent::left(int x) {
+    position.left = x;
+}
+
+int ConnectedComponent::right(int x) {
+    position.right = x;
+}
+
+int ConnectedComponent::top(int x) {
+    position.top = x;
+}
+
+int ConnectedComponent::bottom(int x) {
+    position.bottom = x;
 }
 
 int ConnectedComponent::width() const {
-    return right - left + 1;
+    return right() - left() + 1;
 }
 
 int ConnectedComponent::height() const {
-    return bottom - top + 1;
+    return bottom() - top() + 1;
 }
 
 bitonal_image threshold(byte *pixels, int width, int height, byte level) {
@@ -85,10 +114,10 @@ vector<ConnectedComponent *> find_connected_components(const bitonal_image &imag
         for (int j = 0; j < width; ++j) {
             if (image[i][j]) {
                 ConnectedComponent &component = *tmp_result[colors_canonical[colors[i][j]]];
-                component.left = min(component.left, j);
-                component.right = max(component.right, j);
-                component.top = min(component.top, i);
-                component.bottom = max(component.bottom, i);
+                component.left(min(component.left(), j));
+                component.right(max(component.right(), j));
+                component.top(min(component.top(), i));
+                component.bottom(max(component.bottom(), i));
                 component.color = colors[i][j];
             }
         }
@@ -120,7 +149,7 @@ vector<ConnectedComponent *> find_connected_components(const bitonal_image &imag
         for (int j = 0; j < width; ++j) {
             if (image[i][j] && colors_canonical.count(colors[i][j])) {
                 ConnectedComponent &component = *result[colors_canonical[colors[i][j]]];
-                component.form[i - component.top][j - component.left] = true;
+                component.form[i - component.top()][j - component.left()] = true;
             }
         }
     }
@@ -250,7 +279,7 @@ void place_components(const vector<ConnectedComponent *> components, bitonal_ima
     for (const auto& component : components) {
         for (int i = 0; i < component->height(); ++i) {
             for (int j = 0; j < component->width(); ++j) {
-                image[i + component->top][j + component->left] = component->form[i][j];
+                image[i + component->top()][j + component->left()] = component->form[i][j];
             }
         }
     }
diff --git a/connected_components.h b/connected_components.h
index 7d39da1..1dfbc3b 100644
--- a/connected_components.h
+++ b/connected_components.h
@@ -15,16 +15,26 @@ const int MIN_HEIGHT = 4;
 
 using std::vector;
 
+struct Position {
+    int left, right, top, bottom;
+    Position(): left(999999), right(-1), top(999999), bottom(-1) {
+    }
+};
+
 struct ConnectedComponent {
-    int left;
-    int right;
-    int top;
-    int bottom;
+    Position position;
     int color;
     bitonal_image form;
     vector<int> childs;
-    ConnectedComponent();
     void save(FILE *file) const;
+    int left() const;
+    int right() const;
+    int top() const;
+    int bottom() const;
+    int left(int);
+    int right(int);
+    int top(int);
+    int bottom(int);
     int width() const;
     int height() const;
 };
diff --git a/quality.cpp b/quality.cpp
index d1fe48d..06bf04a 100644
--- a/quality.cpp
+++ b/quality.cpp
@@ -73,7 +73,7 @@ int gradient(const ConnectedComponent &component, const GrayImage &image) {
                     try {
                         int i0 = i + direction.first, j0 = j + direction.second;
                         if (!component.form.at(i0).at(j0)) {
-                            result += image.at(i + component.top).at(j + component.left) - image.at(i0 + component.top).at(j0 + component.left);
+                            result += image.at(i + component.top()).at(j + component.left()) - image.at(i0 + component.top()).at(j0 + component.left());
                         }
                     }
                     catch (std::out_of_range&) {
@@ -103,22 +103,22 @@ int border_length(const ConnectedComponent &component, int width, int height) {
             }
         }
     }
-    if (component.left == 0) {
+    if (component.left() == 0) {
         for (int j = 0; j < component.height(); ++j) {
             result += component.form[j][0];
         }
     }
-    if (component.right == width - 1) {
+    if (component.right() == width - 1) {
         for (int j = 0; j < component.height(); ++j) {
             result += component.form[j].back();
         }
     }
-    if (component.top == 0) {
+    if (component.top() == 0) {
         for (int j = 0; j < component.width(); ++j) {
             result += component.form[0][j];
         }
     }
-    if (component.top == height - 1) {
+    if (component.:ottom() == height - 1) {
         for (int j = 0; j < component.width(); ++j) {
             result += component.form.back()[j];
         }
